import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Table, TableHeader, TableBody, TableRow, TableCell } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

const allData = [
  {
    room: "501",
    name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
    med: "Metformin",
    time: "08:00",
    status: "‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
  },
  {
    room: "502",
    name: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÅ‡∏ã‡πà‡∏•‡∏µ‡πâ",
    med: "Atorvastatin",
    time: "08:00",
    status: "‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤",
  },
  {
    room: "503",
    name: "‡∏≠‡∏î‡∏¥‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏´‡∏≤‡∏ç‡∏Å‡∏•‡πâ‡∏≤",
    med: "Lisinopril",
    time: "08:00",
    status: "‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤",
  },
];

export default function MedicationTracker() {
  const [search, setSearch] = useState("");
  const [date, setDate] = useState(new Date().toISOString().slice(0, 10));

  const filtered = allData.filter(
    (item) =>
      item.name.includes(search) ||
      item.room.includes(search) ||
      item.time.includes(search)
  );

  const statusBadge = (status) => {
    if (status === "‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
      return <Badge className="bg-green-200 text-green-900">‚úÖ {status}</Badge>;
    if (status === "‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤")
      return <Badge className="bg-yellow-200 text-yellow-900">‚è∞ {status}</Badge>;
    return <Badge className="bg-red-200 text-red-900">‚ùå {status}</Badge>;
  };

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">Medication Tracker</h1>

      {/* üîç ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
      <div className="flex flex-col md:flex-row md:items-center md:space-x-4 space-y-2 md:space-y-0">
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ / ‡∏´‡πâ‡∏≠‡∏á / ‡πÄ‡∏ß‡∏•‡∏≤"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="border p-2 rounded-md w-full md:w-1/2"
        />
        <input
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          className="border p-2 rounded-md"
        />
      </div>

      {/* üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏¢‡∏≤ */}
      <Card>
        <CardContent>
          <h2 className="text-lg font-semibold mb-4">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏£‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date}</h2>
          <Table>
            <TableHeader>
              <TableRow>
                <TableCell>‡∏´‡πâ‡∏≠‡∏á</TableCell>
                <TableCell>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</TableCell>
                <TableCell>‡∏¢‡∏≤</TableCell>
                <TableCell>‡πÄ‡∏ß‡∏•‡∏≤</TableCell>
                <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filtered.map((item, idx) => (
                <TableRow key={idx}>
                  <TableCell>{item.room}</TableCell>
                  <TableCell>{item.name}</TableCell>
                  <TableCell>{item.med}</TableCell>
                  <TableCell>{item.time}</TableCell>
                  <TableCell>{statusBadge(item.status)}</TableCell>
                </TableRow>
              ))}
              {filtered.length === 0 && (
                <TableRow>
                  <TableCell colSpan="5" className="text-center py-4 text-gray-500">
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
